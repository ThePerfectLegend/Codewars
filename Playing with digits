/*
 
 Some numbers have funny properties. For example:

 89 --> 8¹ + 9² = 89 * 1

 695 --> 6² + 9³ + 5⁴= 1390 = 695 * 2

 46288 --> 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51

 Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p

 we want to find a positive integer k, if it exists, such that the sum of the digits of n taken to the successive powers of p is equal to k * n.
 In other words:

 Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k

 If it is the case we will return k, if not return -1.

 Note: n and p will always be given as strictly positive integers.
 
 dig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1
 dig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k
 dig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2
 dig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51

 */

func digPow(for number: Int, using power: Int) -> Int {
    
    var k = power
    
    func pow(digit: Int, nubmerOfMultiplying: Int) -> Int {
        var _tempNumber = digit
        for _ in stride(from: nubmerOfMultiplying, to: 1, by: -1) {
            _tempNumber *= digit
        }
        return _tempNumber
    }
        
    let separetedNumber = String(number)
        .compactMap{Int(String($0))}

    var tempArray = [Int]()
        
    for number in separetedNumber {
        tempArray.append(pow(digit: number, nubmerOfMultiplying: k))
        k += 1
    }
    
    let _tempArray = tempArray.reduce(0, { x, y in
        x + y
    })

    let checkingValue = _tempArray / number
    
    if _tempArray == number * checkingValue {
        return checkingValue
    } else {
        return -1
    }
}

digPow(for: 46288, using: 3)

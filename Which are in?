/*

 Given two arrays of strings a1 and a2 return a sorted array r in lexicographical order of the strings of a1 which are substrings of strings of a2.

 Example 1:
 a1 = ["arp", "live", "strong"]

 a2 = ["lively", "alive", "harp", "sharp", "armstrong"]

 returns ["arp", "live", "strong"]

 Example 2:
 a1 = ["tarp", "mice", "bull"]

 a2 = ["lively", "alive", "harp", "sharp", "armstrong"]

 returns []

 Notes:
 Arrays are written in "general" notation. See "Your Test Cases" for examples in your language.
 In Shell bash a1 and a2 are strings. The return is a string where words are separated by commas.
 Beware: r must be without duplicates.


*/

import Foundation

func inArray(_ a1: [String], _ a2: [String]) -> [String] {
    return  Set(a1.filter({ (str) in
        a2.contains(where: { $0.contains(str) })
            }))
        .sorted(by: <)
}

// Best Practice
func inArray2(_ a1: [String], _ a2: [String]) -> [String] {
    return Set(a1.filter { s1 in a2.contains { $0.contains(s1) } }).sorted()
}

var a1 = ["live", "arp", "strong"]
var a2 = ["lively", "alive", "harp", "sharp", "armstrong"]

inArray(a1, a2)
